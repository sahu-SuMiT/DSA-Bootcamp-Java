package com.kunal.maths;

public class Seive {
    public static void main(String[] args) {
        int n = 40;
        boolean[] primes = new boolean[n+1];
        sieve(n, primes);
    }

    // false in array means number is prime
    static void sieve(int n, boolean[] primes) {
        for (int i = 2; i*i <= n; i++) {
            if (!primes[i]) {
                for (int j = i*2; j <= n; j+=i) {
                    primes[j] = true;
                }
            }
        }

        for (int i = 2; i <= n; i++) {
            if (!primes[i]) {
                System.out.print(i + " ");
            }
        }
    }
}
SQUARE ROOT
static double sqrt(int n, int p){
    int start = 0;
    int end = n;
    double root = 0.00;
    while(start <= end){
        int mid = start + (end - start)/2;
        if(mid * mid == n){
            return mid;
        }
        else if(mid * mid < n){
            root = mid;
            start = mid + 1;
        }
        else{
            end = mid - 1;
        }
    }
    for(int i = 0; i < p; i++){
        double incr = 0.1;
        while(root * root <= n){
            root += incr;
        } 
        root -= incr;
        incr /= 10;
    }
    return root;
}

NEWTON METHOD SQRT
double rootN(int n){
    double root = 0;
    double x = n;
    while(true){
        root = 0.5 * (x + x/n);
        if(Math.abs(root - x) < 1){
            break;
        }
        root = x;
    }
    return root;
}
